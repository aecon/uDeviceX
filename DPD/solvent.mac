/* Parameters of DPD

[1] Fedosov, Dmitry A. Multiscale modeling of blood flow and soft
matter. Brown University, 2010.

[2] Groot, Robert D., and Patrick B. Warren. "Dissipative particle
dynamics: Bridging the gap between atomistic and mesoscopic
simulation." Journal of Chemical Physics 107.11 (1997): 4423.

[3] Revenga, Espanol, 2001

*/



load("dimension") ;
load("draw") $
load("to_poly_solve") $
load("dscale.mac") $
alias(di,  dimension) $

/* print info */
who(e):= (printf(true, "~8a :  ~24a : ~40a~%", e , get(e, 'di), get(e, 'de)), 'done)$

/* register units and description of a parameter */
un(e, u, d):= (put(e, u, 'di), put(e, d, 'de)) $

/* helpful operator */
infix("<-", 180, 20) $
ilist(a)::= buildq([a], if not listp(a) then (a: [], a) else a) $
"<-"(a, b)::=buildq([a, b], (ilist(a), if not member(b, a) then a: endcons(b, a), b)) $

/* a copy from abs_integrate.mac  */
safe_op(e) := block([inflag : true], if mapatom(e) then false else op(e)) $

/* process dimensions in expression */
mdi(e):= block([ans, op: safe_op(e)],
  if errcatch(ans: di(e))#[] then ans
  else if op="*" or op="." or op="=" or op="[" then map(mdi, e)
  else funmake('di, [e])) $

/* substitute units from solution */
usubst_aux(so, name, descr):= block([d: assoc(funmake('di, [name]), so)],
  if d=false then error("dimension is not in `so'"),
  un(name, d, descr));
usubst(so, [L]):= for el in L do block([name, descr],
  [name, descr]: el,
  usubst_aux(so, name, descr));



assume('k>0, 'rc>0);

un('Velocity     , 'length/'time           , "velocity units") $
un('Acceleration , di('Velocity)/'time     , "acceleration units") $
un('Force        , di('Acceleration)*'mass , "force units") $
un('Stress       , di('Force)/'length^2     , "units of stress in 3D") $
un('rij          , 'length                  , "length of `rij_v = ri_v - rj_v'") $
un('rc           , 'length                  , "cutoff distance") $
un('eij          , 1                       , "unit vector in direction of rij") $
un('k            , 1                       , "power factor in DPD kernel function") $
un('xsi_ij       , 1                       , "random variable") $
un('Fc           , di('Force)              , "conservative force") $
un('Fr           , di('Force)              , "random force") $         /* (2.3) [1] */
un('Fd           , di('Force)              , "dissipative force") $
un('vij          , di('Velocity)           , "relative particles velocity") $
un('dt           , 'time                   , "time step") $
un('n            , 1/'length^3             , "particle number density") $ /* for 3D */
un('m            , 'mass                   , "particle mass" )$
un('L            , length                  , "domain box size" )$
un('kk           , 1/length                , "spacial wave vector" )$
un('nu           , 'length^2/'time         , "kinematic static viscosity of DPD solvent") $
un('zz           , 1/'time                 , "decay rate") $ /* eq (13) in [3] */

/* eq. (2.8)-(2.9) in [2], a simplified form for dimensional analysis */
wD_expr: (1-rij/rc)^k;
I      : (4*%pi*integrate(wD_expr*'rij^2, 'rij, 0, 'rc));

eq <- Fc =   aij * (1-rij/rc)*eij $
eq <- Fd = - gamma*wD*(vij.eij)*eij $
eq <- Fr =   sigma*wR*xsi_ij/sqrt(dt)*eij $
eq <- wD = wR^2 $
eq <- wD = wD_expr $

eq_fd <- sigma^2 = 2*gamma*kT $ /*  fluctuation-dissipation theorem (FDT) (eq. (5) [2]) */

/* derived variables */
eq_s <- m*v0^2 / 2 = kT $
eq_s <- om0 = 1/3*n*I*gamma/m ;    /* [3], Table 1, added mass for consistancy with [1] */
eq_s <- t0 = 1/om0;
eq_s <- l0 = v0 * t0 $
eq_s <- Omega0 = rc/l0 $
eq_s <-     ls = 1/n^(1/3) $ 
eq_s <- OmegaS = rc/ls $
eq_s <- ta     = sqrt(m*rc/aij) $
eq_s <- OmegaA = t0/ta          $

eq_d: append(mdi(eq), mdi(eq_fd), mdi(eq_s));

var: [aij, gamma, sigma, wD, wR, kT, v0, om0, t0, l0, Omega0, OmegaS, ls, ta, OmegaA] $
so : solve(eq_d, map('di, var))[1];

usubst(so,
  ['aij,         "conservative force constant"],
  ['gamma,       "dissipative force constant"],
  ['sigma,       "random force constant"],
  ['wD,          "dissipative force kernel"],
  ['wD,          "random      force kernel"],
  ['kT ,         "temperature in energy units"],
  ['om0 ,        "collision frequency"],
  ['v0  ,        "equailibrium particle velocity"],
  ['l0  ,        "dynamics distance"],
  ['t0  ,        "collision time"],
  ['Omega0,      "dynamics overlapping"],
  ['ls    ,      "'density' length"],  /* is not named in [3] */
  ['OmegaS,      "dimensionless density"],
  ['ta    ,      "conservative force time"],
  ['OmegaA,      "dimensionless conservative interaction"])$

so_s: solve(append(eq_s, eq_fd), [v0, om0, t0, l0, Omega0, ls, OmegaS, ta, OmegaA, 'gamma])[2];
ev(['Omega0, 'OmegaA, 'OmegaS, 'kk*'l0, 'zz/'om0 ], p_fed, so_s, infeval, k=1, m=1, rc=1);

/*
dl(e):= subst(endcons(k=1, so_s), e);
p    : [Omega0='Omega0_in, OmegaA='OmegaA_in, OmegaS='OmegaS_in] ;
p    : dl(p) ;
d    : dscale(p, ['rc=1, 'm=1, 'kT=1], ['nu, 'gamma, 'aij, 'kT, 'n, 'rc, 'm, 'kk, dl('zz/'om0)]);
*/